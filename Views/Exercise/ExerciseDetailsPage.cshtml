@model Exercise
<div class="container mt-5">
    <div class="row">

        <div class="col-md-6">
            <div class="text-center mb-4">
                <img src="@Model.ExerciseImage" class="img-fluid rounded-3 exercise-image w-100" style="object-fit:cover;" alt="Exercise Image">
            </div>
            <div class="progress mt-3">
                <div id="progressBar" class="progress-bar progress-bar-striped progress-bar-animated bg-info" role="progressbar" style="width: 100%"></div>
            </div>
            <div id="exerciseTime" class="text-center mt-2 text-white">@Model.ExerciseTime seconds</div>
        </div>

        <div class="col-md-6">
            <h2 class="text-white">Exercise Details:</h2>
            <ul class="list-group">
                <li class="list-group-item mt-2">Exercise Name: @Model.ExerciseName</li>
                <li class="list-group-item mt-2">Exercise Time: @Model.ExerciseTime seconds</li>
                <li class="list-group-item mt-2">Rest Between Exercises: @Model.RestBetweenExercises seconds</li>
                <li class="list-group-item mt-2">Reps: @Model.ExerciseReps</li>
            </ul>
            <button id="startWorkoutButton" class="btn btn-primary mt-3">Start Working Out</button>
            <button id="resetButton" class="btn btn-secondary mt-3">Reset</button>
            <p id="warningText" class="text-danger mt-3" style="display: none;">Resetting beyond 45 seconds may count as an additional rep.</p>
        </div>
    </div>
</div>



<script>
    let countdownInterval;

    document.getElementById('startWorkoutButton').addEventListener('click', function () {
        let progressBar = document.getElementById('progressBar');
        let exerciseTimeInSeconds = parseInt("@Model.ExerciseTime");
        let exerciseTimeElement = document.getElementById('exerciseTime');

        let animationDuration = exerciseTimeInSeconds * 1000;
        let remainingTime = exerciseTimeInSeconds;

        progressBar.style.transition = `width ${animationDuration}ms linear`;
        progressBar.style.width = '0%';

        countdownInterval = setInterval(function () {
            remainingTime--;
            if (remainingTime >= 0) {
                exerciseTimeElement.textContent = remainingTime + ' seconds';
            }
            if (remainingTime <= 0) {
                clearInterval(countdownInterval);
                resetExercise();
            }
        }, 1000);

        setTimeout(function () {
            progressBar.style.width = '100%';
        }, animationDuration);

        setTimeout(function () {
            progressBar.style.transition = 'none';
            progressBar.style.width = '0%';
        }, animationDuration);
    });

    function resetExercise() {
        clearInterval(countdownInterval);
        let progressBar = document.getElementById('progressBar');
        let exerciseTimeElement = document.getElementById('exerciseTime');

        // Reset the progress bar
        progressBar.style.transition = 'none';
        progressBar.style.width = '100%';

        // Reset the exercise time
        exerciseTimeElement.textContent = "@Model.ExerciseTime";
    }

    document.getElementById('resetButton').addEventListener('click', function () {
        resetExercise();
    });
</script>




